// web scrape
https://www.codementor.io/nodejs/tutorial/how-to-write-a-web-scraper-in-nodejs
https://scotch.io/tutorials/scraping-the-web-with-node-js

// sockets
http://chariotsolutions.com/blog/post/getting-chatty-angular-socket-io-nodeexpress-bootstrap/
https://scotch.io/tutorials/a-realtime-room-chat-app-using-node-webkit-socket-io-and-mean

// oauth
https://github.com/auth0/socketio-jwt
https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/
https://auth0.com/blog/2014/01/15/auth-with-socket-io/

// db
users table
id | name | password | thumbnail | 1p_score | 2p_score

scores table
id | user_id | opponent_id | path_id | win (bool) | clicks | time

paths table
id | user_id | start | end | path (text)

// scoring system
if lose, no points
if win
  max score in a game = 1000 points (player completes game within 1 click and 5s)
  starting from 5s, points get deducted from 1000
  but points will be deducted before 5s if player clicks more than 1 click
  final score = prev score + (1000 - (time * clicks) / 4)
  player will not get any points if((time * clicks) / 4 > 1000)

  **note 1 click counts as .25, hence the final score divides clicks / 4

// gif links
http://wiki.shoryuken.com/Street_Fighter_2:_Champion_Edition

// Cheat sheet for cURL:

Create: `curl -d '{"todo":{"todo": "hello again"}}' -H "Content-Type: application/json"  http://localhost:3000/todos`

Read: 
  Index: `curl http://localhost:3000/todos`
  Show: `curl http://localhost:3000/todos/3`

Update: `curl -d '{"todo":{"todo": "putting is awesome"}}' -H "Content-Type: application/json" -X PUT  http://localhost:3000/todos/4`

Delete: `curl -X DELETE http://localhost:3000/todos/4`

// todos
7/5 ~ 7/7
x1. create database and seed. make sure api works
  2. create chat app using angular, passport and sockets
  3. create local strategy with passport
  4. integrate passport with sockets
x5. create an wikipedia web scrape app
x6. homepage - styled

7/12
7. Finish auth with local strategy