// web scrape
https://www.codementor.io/nodejs/tutorial/how-to-write-a-web-scraper-in-nodejs
https://scotch.io/tutorials/scraping-the-web-with-node-js

// sockets
http://chariotsolutions.com/blog/post/getting-chatty-angular-socket-io-nodeexpress-bootstrap/
https://scotch.io/tutorials/a-realtime-room-chat-app-using-node-webkit-socket-io-and-mean

// auth
https://github.com/auth0/socketio-jwt
https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/
https://auth0.com/blog/2014/01/15/auth-with-socket-io/

// db
users table
id | name | password | thumbnail | 1p_score | 2p_score

scores table
id | user_id | opponent_id | path_id | win (bool) | clicks | time

paths table
id | user_id | start | end | path (text)

// scoring system
if lose, no points
if win
  max score in a game = 1000 points (player completes game within 1 click and 5s)
  starting from 5s, points get deducted from 1000
  but points will be deducted before 5s if player clicks more than 1 click
  final score = prev score + (1000 - (time * clicks) / 4)
  player will not get any points if((time * clicks) / 4 > 1000)

  **note 1 click counts as .25, hence the final score divides clicks / 4

// gif links
http://wiki.shoryuken.com/Street_Fighter_2:_Champion_Edition

// Cheat sheet for cURL:

Create: `curl -d '{"todo":{"todo": "hello again"}}' -H "Content-Type: application/json"  http://localhost:3000/todos`

Read: 
  Index: `curl http://localhost:3000/todos`
  Show: `curl http://localhost:3000/todos/3`

Update: `curl -d '{"todo":{"todo": "putting is awesome"}}' -H "Content-Type: application/json" -X PUT  http://localhost:3000/todos/4`

Delete: `curl -X DELETE http://localhost:3000/todos/4`

// todos
7/5 ~ 7/7
Xcreate database and seed. make sure api works
  create chat app using angular, passport and sockets
  Xcreate local strategy with passport
  integrate passport with sockets
Xcreate an wikipedia web scrape app
Xhomepage - styled

7/14 ~ 7/17
XFinish auth with jwt

7/15
Xfix sidebar list divider
Xanimate sidebar and init-view on ng-leave
Xstyle ngbootbox
Xadd rankings page
Xdeploy to heroku with db and secret

7/16
Xmake game view transitions smoother
Xget random category, then two random pages in that category
Xadd user stats page
Xadd user edit page
Xfull crud on users almost

7/17
Xensure stats gets stored to db after playing game for one player
Xadjust css. ensure its the same on heroku
Finish two player game

7/18 ~ 7/19
XCreate rankings pages
Xdebug heroku errors
Xcontinue finishing two player game

7/19
Xfind any bugs while playing the game

7/20
how to page
  Welcome
    What is this?
    Rules
    Tips
  One Player
    How to win
    How to lose
  Two Player
    How to win
    How to lose
  Contact
    For more info...
screencast?




script
  Hi everybody, my name is Ken. For my project, I built a game called the Wikirace, which is inspired by original wikipedia game. And for those who do not know, the wikipedia game is a simple game where you start from one article and try to reach another article by clicking through the links on the wikipedia page. And the goal is to be able to get to the destination article in the least amount of time and clicks possible.
  The platform I built makes it possible for users to play in first player as well as in second player. And it also makes it possible to keep record of your score if you create an account. So the first thing should do is to login. As you can see...

  if you want to see the stats of other players, Rankings...

  now onto the game itself... One Player...
    from to...
    change articles...
    click through...
    sidebar...
    max points...

  Now that we have a basic idea of how the game works and the interface, I would like to bring up my assistant Matt to go through a demo of the second player

  and while matt is getting setup, I would like to talk about the technologies involved in the app
  The technologies involved are
    angular js for the front end
    socket io for the real time gaming 
    node js for the backend
    cheerio js and request js for web scraping wiki
    json web tokens for authenticating users

  And that is the Wikirace. Please check it out on: wikirace.heroku .Thank you very much for listening. Any Questions?














// probably won't have time for these:
update readme
add audio
add tests
refactor